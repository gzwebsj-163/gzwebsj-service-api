"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require('fs');
var console_1 = require("console");
var ReadMe = /** @class */ (function () {
    function ReadMe() {
        this.ReadFile;
        this.ReadTeamplate;
        this.Run;
    }
    ReadMe.prototype.ReadFile = function (path) {
        return new Promise(function (res, rej) {
            var arr = [];
            var obj = [];
            fs.readFile(path, 'utf-8', function (err, data) {
                var rege = /\/\* readme\.md([\s\S]*?)\*\//g;
                var matches = data.match(rege);
                if (matches) {
                    matches.forEach(function (match) {
                        var titleMatch = match.match(/title:'(.*?)'/);
                        var parseMatch = match.match(/parse\s*:\s*(\[.*?\])/);
                        var isparamMatch = match.match(/isparam:'(.*?)'/);
                        if (titleMatch && parseMatch && isparamMatch) {
                            var title = titleMatch[1];
                            var parse = parseMatch[1];
                            var isparam = isparamMatch[1];
                            arr.push(title, parse, isparam);
                        }
                        else {
                            (0, console_1.error)(err, rej);
                        }
                    });
                    for (var i = 0; i < arr.length; i += 3) {
                        var title = arr[i];
                        var parse = arr[i + 1];
                        var isparam = arr[i + 2];
                        obj.push({ title: title, parse: parse, isparam: isparam });
                    }
                    res(obj);
                }
                else {
                    (0, console_1.error)(err, rej);
                }
            });
        });
    };
    ;
    ReadMe.prototype.ReadTeamplate = function (Option, map) {
        var str = "```\n" +
            "| ".concat(Option.title, " |").concat(Option.type_title, " | ").concat(Option.note, " | ").concat(Option.isparam, " |\n") +
            "| --- | --- | --- | --- |\n";
        var title = '';
        var parse = '';
        var isparam = '';
        var s = '';
        for (var i = 0; i < map.length; i++) {
            title = map[i]['title'];
            parse = JSON.stringify((map[i]['parse']));
            isparam = map[i]['isparam'];
            var jsonstr = JSON.parse(parse);
            var tmpstr = jsonstr.replace(/([{,])(\s*)([A-Za-z0-9_\-]+?)\s*:/g, '$1"$3":').replace(/(['"])?([a-zA-Z0-9_\-]+)(['"])?:/g, '"$2": ');
            var ostr = tmpstr.replace(/:( *)([^,}\]]+)/g, ':"$2"');
            var obj = JSON.parse(ostr);
            for (var key in obj) {
                s += "|" + title + "| " + obj[key]['type'] + " | " + obj[key]['note'] + "";
            }
            s += "| " + isparam + "|\n";
        }
        return (str + s);
    };
    ReadMe.prototype.Run = function (code, Option, map) {
        var tmp = ">\n" +
            "```javascript\n" +
            "##### Dome\n" +
            code;
        (0, console_1.log)(Option);
        var str = this.ReadTeamplate(Option, map) + "\n" +
            "| ".concat(Option.title, " |").concat(Option.type_title, " | ").concat(Option.note, " | ").concat(Option.isparam, " |\n") +
            "| --- | --- | --- | --- |\n";
        var title = '';
        var parse = '';
        var isparam = '';
        var s = '';
        for (var i = 0; i < map.length; i++) {
            title += map[i]['title'];
            parse = JSON.stringify((map[i]['parse']));
            isparam = map[i]['isparam'];
            var jsonstr = JSON.parse(parse);
            var tmpstr = jsonstr.replace(/([{,])(\s*)([A-Za-z0-9_\-]+?)\s*:/g, '$1"$3":').replace(/(['"])?([a-zA-Z0-9_\-]+)(['"])?:/g, '"$2": ');
            var ostr = tmpstr.replace(/:( *)([^,}\]]+)/g, ':"$2"');
            var obj = JSON.parse(ostr);
            for (var key in obj) {
                s += "|" + obj[key]['name'] + "| " + obj[key]['type'] + " | " + obj[key]['note'] + "| " + obj[key]['isparam'] + "|\n";
            }
        }
        return (tmp + str + s);
    };
    return ReadMe;
}());
exports.default = ReadMe;
