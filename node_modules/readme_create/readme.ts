import { ReadModule } from ".";
const fs = require('fs');
import { error, log } from "console";
class ReadMe implements ReadModule {
    constructor(){
        this.ReadFile;
        this.ReadTeamplate;
        this.Run;
    }
    ReadFile(path?: string): Promise<Array<object>> {
        return new Promise((res, rej) => {
            let arr: Array<string> = [];
            let obj: Array<object> = [];
            fs.readFile(path, 'utf-8', (err: any, data: any & string) => {
                const rege: RegExp = /\/\* readme\.md([\s\S]*?)\*\//g;
                const matches: RegExpMatchArray = data.match(rege);
                if (matches) {
                    matches.forEach(match => {
                        const titleMatch = match.match(/title:'(.*?)'/);
                        const parseMatch = match.match(/parse\s*:\s*(\[.*?\])/);
                        const isparamMatch = match.match(/isparam:'(.*?)'/);
                        if (titleMatch && parseMatch && isparamMatch) {
                            const title: string = titleMatch[1];
                            const parse: string = parseMatch[1];
                            const isparam: string = isparamMatch[1];
                            arr.push(title, parse, isparam);
                        } else {
                            error(err, rej);
                        }
                    })
                    for (let i = 0; i < arr.length; i += 3) {
                        const title = arr[i];
                        const parse = arr[i + 1];
                        const isparam = arr[i + 2];
                        obj.push({ title, parse, isparam });
                    }
                    res(obj);
                } else {
                    error(err, rej);
                }
            })
        });
    };

    ReadTeamplate(Option: object & {title:string,type_title:string,note:string,isparam:string}  & object, map: { [key: string]: any }) {
        const str: string = "```\n" +
            `| ${Option.title} |${Option.type_title} | ${Option.note} | ${Option.isparam} |\n` +
            "| --- | --- | --- | --- |\n";
        let title: string = '';
        let parse: string = '';
        let isparam: string = '';
        let s: string = '';
        for (let i = 0; i < map.length; i++) {
            title = map[i]['title'] as string;
            parse = JSON.stringify((map[i]['parse']));
            isparam = map[i]['isparam'];
            let jsonstr: string = JSON.parse(parse);
            let tmpstr: string = jsonstr.replace(/([{,])(\s*)([A-Za-z0-9_\-]+?)\s*:/g, '$1"$3":').replace(/(['"])?([a-zA-Z0-9_\-]+)(['"])?:/g, '"$2": ');
            let ostr: string = tmpstr.replace(/:( *)([^,}\]]+)/g, ':"$2"');
            let obj = JSON.parse(ostr);
            for (let key in obj) {
                s += "|" + title + "| " + obj[key]['type'] + " | " + obj[key]['note'] + "";
            }
            s += "| " + isparam + "|\n"
        }
        return (str + s);
    }

    Run(code: string, Option: object & {title:string,type_title:string,note:string,isparam:string} & object, map: { [key: string]: any }) {
        const tmp = ">\n" +
            "```javascript\n" +
            "##### Dome\n" +
            code;
            log(Option);
        const str: string =
            this.ReadTeamplate(Option, map) + "\n" +
            `| ${Option.title} |${Option.type_title} | ${Option.note} | ${Option.isparam} |\n` +
            "| --- | --- | --- | --- |\n";
        let title: string = '';
        let parse: string = '';
        let isparam: string = '';
        let s: string = '';
        for (let i = 0; i < map.length; i++) {
            title += map[i]['title'];
            parse = JSON.stringify((map[i]['parse']));
            isparam = map[i]['isparam'];
            let jsonstr: string = JSON.parse(parse);
            let tmpstr: string = jsonstr.replace(/([{,])(\s*)([A-Za-z0-9_\-]+?)\s*:/g, '$1"$3":').replace(/(['"])?([a-zA-Z0-9_\-]+)(['"])?:/g, '"$2": ');
            let ostr: string = tmpstr.replace(/:( *)([^,}\]]+)/g, ':"$2"');
            let obj = JSON.parse(ostr);
            for (let key in obj) {
                s += "|" + obj[key]['name'] + "| " + obj[key]['type'] + " | " + obj[key]['note'] + "| " + obj[key]['isparam'] + "|\n";
            }
        }
        return (tmp + str + s);
    }
}
export default ReadMe;